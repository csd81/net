
Introduction to Access Control Lists



8.1.1



What is an ACL?	Routers make routing decisions based on information in the packet header. Traffic entering a router interface is routed solely based on information within the routing table. The router compares the destination IP address with routes in the routing table to find the best match and then forwards the packet based on the best match route. That same process can be used to filter traffic using an access control list (ACL).



An ACL is a series of IOS commands that are used to filter packets based on information found in the packet header. By default, a router does not have any ACLs configured. However, when an ACL is applied to an interface, the router performs the additional task of evaluating all network packets as they pass through the interface to determine if the packet can be forwarded.



An ACL uses a sequential list of permit or deny statements, known as access control entries (ACEs).



Note: ACEs are also commonly called ACL statements.



When network traffic passes through an interface configured with an ACL, the router compares the information within the packet against each ACE, in sequential order, to determine if the packet matches one of the ACEs. This process is called packet filtering.



Several tasks performed by routers require the use of ACLs to identify traffic. The table lists some of these tasks with examples. On cards 2-7.

Limit network traffic to increase network performance	A corporate policy prohibits video traffic on the network to reduce the network load.



A policy can be enforced using ACLs to block video traffic.

Provide traffic flow control	A corporate policy requires that routing protocol traffic be limited to certain links only.



A policy can be implemented using ACLs to restrict the delivery of routing updates to only those that come from a known source.

Provide a basic level of security for network access	Corporate policy demands that access to the Human Resources network be restricted to authorized users only.



A policy can be enforced using ACLs to limit access to specified networks.

Filter traffic based on traffic type	Corporate policy requires that email traffic be permitted into a network, but that Telnet access be denied.



A policy can be implemented using ACLs to filter traffic by type.

Screen hosts to permit or deny access to network services	Corporate policy requires that access to some file types (e.g., FTP or HTTP) be limited to user groups.



A policy can be implemented using ACLs to filter user access to services.

Provide priority to certain classes of network traffic	Corporate traffic specifies that voice traffic be forwarded as fast as possible to avoid any interruption.



A policy can be implemented using ACLs and QoS services to identify voice traffic and process it immediately.

8.1.2 



Packet Filtering	Packet filtering controls access to a network by analyzing the incoming and/or outgoing packets and forwarding them or discarding them based on given criteria. Packet filtering can occur at Layer 3 or Layer 4, as shown in the figure.



OSI Model



7 Application



6 Presentation



5 Session



4 Transport 

 Packet filtering works at Layer 3 and 4 

3 Network



2 Data Link



1 Physical



Cisco routers support two types of ACLs: On cards 9 and 10.

Standard ACLs	ACLs only filter at Layer 3 using the source IPv4 address only.

Extended ACLs	ACLs filter at Layer 3 using the source and / or destination IPv4 address. They can also filter at Layer 4 using TCP, UDP ports, and optional protocol type information for finer control.

8.1.3



Numbered and Named ACLs	Numbered ACLs



ACLs number 1 to 99, or 1300 to 1999 are standard ACLs while ACLs number 100 to 199, or 2000 to 2699 are extended ACLs, as shown in the output.



R1(config)# access-list ?

<1-99> IP standard access list

<100-199> IP extended access list

<1100-1199> Extended 48-bit MAC address access list

<1300-1999> IP standard access list (expanded range)

<200-299> Protocol type-code access list

<2000-2699> IP extended access list (expanded range)

<700-799> 48-bit MAC address access list

rate-limit Simple rate-limit specific access list

template Enable IP template acls

R1(config)# access-list



Named ACLs



Named ACLs is the preferred method to use when configuring ACLs. Specifically, standard and extended ACLs can be named to provide information about the purpose of the ACL. For example, naming an extended ACL FTP-FILTER is far better than having a numbered ACL 100.



The ip access-list global configuration command is used to create a named ACL, as shown in the following example.



R1(config)# ip access-list extended FTP-FILTER

R1(config-ext-nacl)# permit tcp 192.168.10.0 0.0.0.255 any eq ftp

R1(config-ext-nacl)# permit tcp 192.168.10.0 0.0.0.255 any eq ftp-data

R1(config-ext-nacl)#



The following summarizes the rules to follow for named ACLs.



Assign a name to identify the purpose of the ACL.

Names can contain alphanumeric characters.

Names cannot contain spaces or punctuation.

It is suggested that the name be written in CAPITAL LETTERS.

Entries can be added or deleted within the ACL.

8.1.4



ACL Operation	ACLs define the set of rules that give added control for packets that enter inbound interfaces, packets that relay through the router, and packets that exit outbound interfaces of the router.



ACLs can be configured to apply to inbound traffic and outbound traffic, as shown in the figure.



R1

Inbound ACLOutbound ACL



Note: ACLs do not act on packets that originate from the router itself.



An inbound ACL filters packets before they are routed to the outbound interface. An inbound ACL is efficient because it saves the overhead of routing lookups if the packet is discarded. If the packet is permitted by the ACL, it is then processed for routing. Inbound ACLs are best used to filter packets when the network attached to an inbound interface is the only source of packets that need to be examined.



An outbound ACL filters packets after being routed, regardless of the inbound interface. Incoming packets are routed to the outbound interface and then they are processed through the outbound ACL. Outbound ACLs are best used when the same filter will be applied to packets coming from multiple inbound interfaces before exiting the same outbound interface.



When an ACL is applied to an interface, it follows a specific operating procedure. For example, here are the operational steps used when traffic has entered a router interface with an inbound standard IPv4 ACL configured.



1. The router extracts the source IPv4 address from the packet header.



2. The router starts at the top of the ACL and compares the source IPv4 address to each ACE in a sequential order.



3. When a match is made, the router carries out the instruction, either permitting or denying the packet, and the remaining ACEs in the ACL, if any, are not analyzed.



4. If the source IPv4 address does not match any ACEs in the ACL, the packet is discarded because there is an

8.1.5



Packet Tracer - ACL Demonstration	In this activity, you will observe how an access control list (ACL) can be used to prevent a ping from reaching hosts on remote networks. After removing the ACL from the configuration, the pings will be successful.

Wildcard Masking



8.2.1



Wildcard Mask Overview	In the previous topic, you learned about the purpose of ACLs. This topic explains how ACLs use wildcard masks. An IPv4 ACE uses a 32-bit wildcard mask to determine which bits of the address to examine for a match. Wildcard masks are also used by the Open Shortest Path First (OSPF) routing protocol.



A wildcard mask is similar to a subnet mask in that it uses the ANDing process to identify which bits in an IPv4 address to match. However, they differ in the way they match binary 1s and 0s. Unlike a subnet mask, in which binary 1 is equal to a match and binary 0 is not a match, in a wildcard mask, the reverse is true.



Wildcard masks use the following rules to match binary 1s and 0s: On cards 15-16.



The table lists some examples of wildcard masks and what they would identify. On cards 17-21.

Wildcard mask bit 0	Match the corresponding bit value in the address

Wildcard mask bit 1	Ignore the corresponding bit value in the address

Wildcard Mask



0.0.0.0	Last Octet (in Binary)



00000000



Meaning (0 - match, 1 - ignore)



Match all octets.

Wildcard Mask



0.0.0.63	Last Octet (in Binary)



00111111



Meaning (0 - match, 1 - ignore)



Match the first three octets



Match the two left most bits of the last octet



Ignore the last 6 bits

Wildcard Mask



0.0.0.15	Last Octet (in Binary)



00001111



Meaning (0 - match, 1 - ignore)



Match the first three octets



Match the four left most bits of the last octet



Ignore the last 4 bits of the last octet

Wildcard Mask



0.0.0.252	Last Octet (in Binary)



11111100



Meaning (0 - match, 1 - ignore)



Match the first three octets



Ignore the six left most bits of the last octet



Match the last two bits

Wildcard Mask



0.0.0.255	Last Octet (in Binary)



11111111



Meaning (0 - match, 1 - ignore)



Match the first three octet



Ignore the last octet

8.2.2



Wildcard Mask Types	Using wildcard masks will take some practice. Refer to the examples to learn how the wildcard mask is used to filter traffic for one host, one subnet, and a range IPv4 addresses.



Click each button to see how the wildcard mask is used in ACLs. On cards 23-25.

Wildcard to Match a Host	In this example, the wildcard mask is used to match a specific host IPv4 address. Assume ACL 10 needs an ACE that only permits the host with IPv4 address 192.168.1.1. Recall that "0" equals a match and "1" equals ignore. To match a specific host IPv4 address, a wildcard mask consisting of all zeroes (i.e., 0.0.0.0) is required.



The table lists in binary, the host IPv4 address, the wildcard mask, and the permitted IPv4 address.



The 0.0.0.0 wildcard mask stipulates that every bit must match exactly. Therefore, when the ACE is processed, the wildcard mask will permit only the 192.168.1.1 address. The resulting ACE in ACL 10 would be access-list 10 permit 192.168.1.1 0.0.0.0.



 Decimal Binary 



IPv4 address 192.168.1.1 11000000.10101000.00000001.00000001



Wildcard Mask 0.0.0.0

 00000000.00000000.00000000.00000000



Permitted IPv4 Address



 192.168.1.1 11000000.10101000.00000001.00000001

Wildcard Mask to Match an IPv4 Subnet	In this example, ACL 10 needs an ACE that permits all hosts in the 192.168.1.0/24 network. The wildcard mask 0.0.0.255 stipulates that the very first three octets must match exactly but the fourth octet does not.



The table lists in binary, the host IPv4 address, the wildcard mask, and the permitted IPv4 addresses.



When processed, the wildcard mask 0.0.0.255 permits all hosts in the 192.168.1.0/24 network. The resulting ACE in ACL 10 would be access-list 10 permit 192.168.1.0 0.0.0.255.



 Decimal Binary



IPv4 address 192.168.1.1

 11000000.10101000.00000001.00000001



Wildcard Mask 0.0.0.255



 00000000.00000000.00000000.11111111



Permitted Host 

IPv4 Addresses 

 192.168.1.1

 to 

 192.168.1.254 

 

 11000000.10101000.00000001.00000000



 11000000.10101000.00000001.11111111

Wildcard Mask to Match an IPv4 Address Range	In this example, ACL 10 needs an ACE that permits all hosts in the 192.168.16.0/24, 192.168.17.0/24, ..., 192.168.31.0/24 networks. The wildcard mask 0.0.15.255 would correctly filter that range of addresses.



The table lists in binary the host IPv4 address, the wildcard mask, and the permitted IPv4 addresses.



The highlighted wildcard mask bits identify which bits of the IPv4 address must match. When processed, the wildcard mask 0.0.15.255 permits all hosts in the 192.168.16.0/24 to 192.168.31.0/24 networks. The resulting ACE in ACL 10 would be access-list 10 permit 192.168.16.0 0.0.15.255.



 Decimal Binary



IPv4 address 192.168.16.0



 11000000.10101000.00010000.00000000



Wildcard Mask 0.0.15.255



 00000000.00000000.00001111.11111111



Permitted Host IPv4 Addresses



 192.168.16.1

 to

 192.168.31.254 



 11000000.10101000.00010000.00000000



 11000000.10101000.00011111.11111111

8.2.3



Wildcard Mask Calculation	Calculating wildcard masks can be challenging. One shortcut method is to subtract the subnet mask from 255.255.255.255. Refer to the examples to learn how to calculate the wildcard mask using the subnet mask.



Click each button to see how to calculate each wildcard mask. On cards 27-30.

Example 1	Assume you wanted an ACE in ACL 10 to permit access to all users in the 192.168.3.0/24 network. To calculate the wildcard mask, subtract the subnet mask (i.e., 255.255.255.0) from 255.255.255.255, as shown in the table.



The solution produces the wildcard mask 0.0.0.255. Therefore, the ACE would be access-list 10 permit 192.168.3.0 0.0.0.255.



Starting value 255.255.255.255



Subtract the subnet mask - 255.255.255. 0



Resulting wildcard mask 0. 0. 0.255

Example 2	In this example, assume you wanted an ACE in ACL 10 to permit network access for the 14 users in the subnet 192.168.3.32/28. Subtract the subnet (i.e., 255.255.255.240) from 255.255.255.255, as shown in the table.



This solution produces the wildcard mask 0.0.0.15. Therefore, the ACE would be access-list 10 permit 192.168.3.32 0.0.0.15.



Starting value 255.255.255.255



Subtract the subnet mask - 255.255.255.240



Resulting wildcard mask 0. 0. 0. 15

Example 3	In this example, assume you needed an ACE in ACL 10 to permit only networks 192.168.10.0 and 192.168.11.0. These two networks could be summarized as 192.168.10.0/23 which is a subnet mask of 255.255.254.0. Again, you subtract 255.255.254.0 subnet mask from 255.255.255.255, as shown in the table.



This solution produces the wildcard mask 0.0.1.255. Therefore, the ACE would be access-list 10 permit 192.168.10.0 0.0.1.255.



Starting value 255.255.255.255



Subtract the subnet mask - 255.255.254. 0



Resulting wildcard mask 0. 0. 1.255

Example 4	Consider an example in which you need an ACL number 10 to match networks in the range between 192.168.16.0/24 to 192.168.31.0/24. This network range could be summarized as 192.168.16.0/20 which is a subnet mask of 255.255.240.0. Therefore, subtract 255.255.240.0 subnet mask from 255.255.255.255, as shown in the table.



This solution produces the wildcard mask 0.0.15.255. Therefore, the ACE would be access-list 10 permit 192.168.16.0 0.0.15.255.



Starting value 255.255.255.255



Subtract the subnet mask - 255.255.240. 0



Resulting wildcard mask 0. 0. 15.255

8.2.4



Wildcard Mask Keywords	Working with decimal representations of binary wildcard mask bits can be tedious. To simplify this task, the Cisco IOS provides two keywords to identify the most common uses of wildcard masking. Keywords reduce ACL keystrokes but more importantly, keywords make it easier to read the ACE.



The two keywords are:



host - This keyword substitutes for the 0.0.0.0 mask. This mask states that all IPv4 address bits must match to filter just one host address.



any - This keyword substitutes for the 255.255.255.255 mask. This mask says to ignore the entire IPv4 address or to accept any addresses.



For example, in the command output, two ACLs are configured. The ACL 10 ACE permits only the 192.168.10.10 host and the ACL 11 ACE permits all hosts.



R1(config)# access-list 10 permit 192.168.10.10 0.0.0.0

R1(config)# access-list 11 permit 0.0.0.0 255.255.255.255

R1(config)#



Alternatively, the keywords host and any could have been used to replace the highlighted output.



The following commands accomplishes the same task as the previous commands.



R1(config)# access-list 10 permit host 192.168.10.10

R1(config)# access-list 11 permit any

R1(config)#

8.2.5



Check Your Understanding - Wildcard Masks in ACLs	Check your understanding wildcard masks in ACLs by choosing the BEST answer to the following questions.

1. Which wildcard mask would permit only host 10.10.10.1?	0.0.0.0

2. Which wildcard mask would permit only hosts from the 10.10.0.0/16 network?	0.0.255.255

3. Which wildcard mask would permit all hosts?	255.255.255.255

4. Which wildcard mask would permit all hosts from the 192.168.10.0/24 network?	0.0.0.255

8.3.1



Create an ACL	In a previous topic, you learned about what an ACL does and why it is important. In this topic, you will learn about creating ACLs.



All access control lists (ACLs) must be planned. However, this is especially true for ACLs requiring multiple access control entries (ACEs).



When configuring a complex ACL, it is suggested that you:



Use a text editor and write out the specifics of the policy to be implemented.



Add the IOS configuration commands to accomplish those tasks.



Include remarks to document the ACL.



Copy and paste the commands onto the device.



Always thoroughly test an ACL to ensure that it correctly applies the desired policy.



These recommendations enable you to create the ACL thoughtfully without impacting the traffic on the network.

8.3.2



Numbered Standard IPv4 ACL Syntax	To create a numbered standard ACL, use the following global configuration command:



Router(config)# access-list access-list-number {deny | permit | remark text} source [source-wildcard] [log]



Use the no access-list access-list-number global configuration command to remove a numbered standard ACL.



The table provides a detailed explanation of the syntax for a standard ACL. On cards 39-45.

access-list-number	This is the decimal number of the ACL.



Standard ACL number range is 1 to 99 or 1300 to 1999.

deny	This denies access if the condition is matched.

permit	This permits access if the condition is matched.

remark text	(Optional) This adds a text entry for documentation purposes.



Remarks are extremely useful, especially in longer or more complex ACLs.



Each remark is limited to 100 characters.

source	This identifies the source network or host address to filter.



Use the any keyword to specify all networks.



Use the host ip-address keyword or simply enter an ip-address (without the host keyword) to identify a specific IP address.

source-wildcard	(Optional) This is a 32-bit wildcard mask that is applied to the source. If omitted, a default 0.0.0.0 mask is assumed.

log	(Optional) This keyword generates an informational message whenever the ACE is matched.



Message includes ACL number, matched condition (i.e., permitted or denied), source address, and number of packets.



This message is generated for the first matched packet.



Unfortunately, ACL logging can be CPU intensive and can negatively affect other functions therefore it should only be implemented for troubleshooting or security reasons.

8.3.3



Named Standard IPv4 ACL Syntax	Naming an ACL makes it easier to understand its function. To create a named standard ACL, use the following global configuration command:



Router(config)# ip access-list standard access-list-name



This command enters the named standard configuration mode where you configure the ACL ACEs.



ACL names are alphanumeric, case sensitive, and must be unique. Capitalizing ACL names is not required but makes them stand out when viewing the running-config output. It also makes it less likely that you will accidentally create two different ACLs with the same name but with different uses of capitalization.



Note: Use the no ip access-list standard access-list-name global configuration command to remove a named standard IPv4 ACL.



In the example, a named standard IPv4 ACL called NO-ACCESS is created. Notice that the prompt changes to named standard ACL configuration mode. ACE statements are entered in the named standard ACL sub configuration mode. Use the help facility to view all the named standard ACL ACE options.



The three highlighted options are configured similar to the numbered standard ACL. Unlike the numbered ACL method, there is no need to repeat the initial ip access-list command for each ACE.



R1(config)# ip access-list standard NO-ACCESS

R1(config-std-nacl)# ?

Standard Access List configuration commands:

<1-2147483647> Sequence Number

default Set a command to its defaults

deny Specify packets to reject

exit Exit from access-list configuration mode

no Negate a command or set its defaults

permit Specify packets to forward

remark Access list entry comment

R1(config-std-nacl)#

8.3.4



Numbered Extended IPv4 ACL Syntax	The procedural steps for configuring extended ACLs are the same as for standard ACLs. The extended ACL is first configured, and then it is activated on an interface. However, the command syntax and parameters are more complex to support the additional features provided by extended ACLs.



To create a numbered extended ACL, use the following global configuration command:



Router(config-if)# ip access-group 0 0



Use the no access-list access-list-number global configuration command to remove an extended ACL.



Although there are many keywords and parameters for extended ACLs, it is not necessary to use all of them when configuring an extended ACL. The table provides a detailed explanation of the syntax for an extended ACL. On cards 48-60.



The command to apply an extended IPv4 ACL to an interface is the same as the command used for standard IPv4 ACLs.



Router(config-if)# ip access-group {access-list-number | access-list-name} {in | out}



To remove an ACL from an interface, first enter the no ip access-group interface configuration command. To remove the ACL from the router, use the no access-list global configuration command.



Note: The internal logic applied to the ordering of standard ACL statements does not apply to extended ACLs. The order in which the statements are entered during configuration is the order they are displayed and processed.

access-list-number	This is the decimal number of the ACL.



Extended ACL number range is 100 to 199 and 2000 to 2699.

deny	This denies access if the condition is matched.

permit	This permits access if the condition is matched.

remark text	(Optional) Adds a text entry for documentation purposes.



Each remark is limited to 100 characters.

protocol	Name or number of an internet protocol.



Common keywords include ip, tcp, udp, and icmp.



The ip keyword matches all IP protocols.

source	This identifies the source network or host address to filter.



Use the any keyword to specify all networks.



Use the host ip-address keyword or simply enter an ip-address (without the host keyword) to identify a specific IP address.

source-wildcard	(Optional) A 32-bit wildcard mask that is applied to the source.

destination	This identifies the destination network or host address to filter.



Use the any keyword to specify all networks.



Use the host ip-address keyword or ip-address.

destination-wildcard	(Optional) This is a 32-bit wildcard mask that is applied to the destination.

operator	(Optional) This compares source or destination ports.



Some operators include lt (less than), gt (greater than), eq (equal), and neq (not equal).

port	(Optional) The decimal number or name of a TCP or UDP port.

established	(Optional) For the TCP protocol only.



This is a 1st generation firewall feature.

log	(Optional) This keyword generates and sends an informational message whenever the ACE is matched.



This message includes ACL number, matched condition (i.e., permitted or denied), source address, and number of packets.



This message is generated for the first matched packet.



This keyword should only be implemented for troubleshooting or security reasons.

8.3.5



Protocols and Port Numbers	Extended ACLs can filter on many different types of internet protocols and ports. Click each button for more information about the internet protocols and ports on which extended ACLs can filter. On cards 62-63.

Protocol Options	Protocol Options



The four highlighted protocols are the most popular options.



Note: Use the ? to get help when entering a complex ACE.



Note: If an internet protocol is not listed, then the IP protocol number could be specified. For instance, the ICMP protocol number 1, TCP is 6, and UDP is 17.



R1(config)# access-list 100 permit ?

<0-255> An IP protocol number

ahp Authentication Header Protocol

dvmrp dvmrp

eigrp Cisco's EIGRP routing protocol

esp Encapsulation Security Payload

gre Cisco's GRE tunneling

icmp Internet Control Message Protocol

igmp Internet Gateway Message Protocol

ip Any Internet Protocol

ipinip IP in IP tunneling

nos KA9Q NOS compatible IP over IP tunneling

object-group Service object group

ospf OSPF routing protocol

pcp Payload Compression Protocol

pim Protocol Independent Multicast

tcp Transmission Control Protocol

udp User Datagram Protocol

R1(config)# access-list 100 permit

Port Keyword Options	Selecting a protocol influences port options. For instance, selecting the:



tcp protocol would provide TCP related ports options



udp protocol would provide UDP specific ports options



icmp protocol would provide ICMP related ports (i.e., message) options



Again, notice how many TCP port options are available. The highlighted ports are popular options.



Port names or number can be specified. However, port names make it easier to understand the purpose of an ACE. Notice how some common ports names (e.g., SSH and HTTPS) are not listed. For these protocols, port numbers will have to be specified.



R1(config)# access-list 100 permit tcp any any eq ?

<0-65535> Port number

bgp Border Gateway Protocol (179)

chargen Character generator (19)

cmd Remote commands (rcmd, 514)

daytime Daytime (13)

discard Discard (9)

domain Domain Name System (53)

echo Echo (7)

exec Exec (rsh, 512)

finger Finger (79)

ftp File Transfer Protocol (21)

ftp-data FTP data connections (20)

gopher Gopher (70)

hostname NIC hostname server (101)

ident Ident Protocol (113)

irc Internet Relay Chat (194)

klogin Kerberos login (543)

kshell Kerberos shell (544)

login Login (rlogin, 513)

lpd Printer service (515)

msrpc MS Remote Procedure Call (135)

nntp Network News Transport Protocol (119)

onep-plain Onep Cleartext (15001)

onep-tls Onep TLS (15002)

pim-auto-rp PIM Auto-RP (496)

pop2 Post Office Protocol v2 (109)

pop3 Post Office Protocol v3 (110)

smtp Simple Mail Transport Protocol (25)

sunrpc Sun Remote Procedure Call (111)

syslog Syslog (514)

tacacs TAC Access Control System (49)

talk Talk (517)

telnet Telnet (23)

time Time (37)

uucp Unix-to-Unix Copy Program (540)

whois Nicname (43)

www World Wide Web (HTTP, 80)

8.3.6



Protocols and Port Numbers Configuration Examples	Extended ACLs can filter on different port number and port name options. This example configures an extended ACL 100 to filter HTTP traffic. The first ACE uses the www port name. The second ACE uses the port number 80. Both ACEs achieve exactly the same result.



R1(config)# access-list 100 permit tcp any any eq www

R1(config)# !or...

R1(config)# access-list 100 permit tcp any any eq 80



Configuring the port number is required when there is not a specific protocol name listed such as SSH (port number 22) or an HTTPS (port number 443), as shown in the next example.



R1(config)# access-list 100 permit tcp any any eq 22

R1(config)# access-list 100 permit tcp any any eq 443

R1(config)#

8.3.7



TCP Established Extended ACL	TCP can also perform basic stateful firewall services using the TCP established keyword. The keyword enables inside traffic to exit the inside private network and permits the returning reply traffic to enter the inside private network, as shown in the figure.



Inside Private Network



LAN 1



192.168.10.0/24



TCP request from PC1 to the outside public network is permitted.





Outside Public Network 



Internet



TCP reply traffic returning from the outside public network is permitted.



TCP requests denied from outside public network hosts.



However, TCP traffic generated by an outside host and attempting to communicate with an inside host is denied.



The established keyword can be used to permit only the return HTTP traffic from requested websites, while denying all other traffic.



In the topology, the design for this example shows that ACL 110, which was previously configured, will filter traffic from the inside private network. ACL 120, using the established keyword, will filter traffic coming into the inside private network from the outside public network.



Inside Private Network 



LAN 1



192.168.10.0/24





Outside Public Network



Internet



In the example, ACL 120 is configured to only permit returning web traffic to the inside hosts. The new ACL is then applied outbound on the R1 G0/0/0 interface. The show access-lists command displays both ACLs. Notice from the match statistics that inside hosts have been accessing the secure web resources from the internet.



R1(config)# access-list 120 permit tcp any 192.168.10.0 0.0.0.255 established

R1(config)# interface g0/0/0

R1(config-if)# ip access-group 120 out

R1(config-if)# end

R1# show access-lists

Extended IP access list 110

10 permit tcp 192.168.10.0 0.0.0.255 any eq www

20 permit tcp 192.168.10.0 0.0.0.255 any eq 443 (657 matches)

Extended IP access list 120

10 permit tcp

8.3.8



Named Extended IPv4 ACL Syntax	Naming an ACL makes it easier to understand its function. To create a named extended ACL, use the following global configuration command:



Router(config)# ip access-list extended access-list-name



This command enters the named extended configuration mode. Recall that ACL names are alphanumeric, case sensitive, and must be unique.



In the example, a named extended ACL called NO-FTP-ACCESS is created and the prompt changed to named extended ACL configuration mode. ACE statements are entered in the named extended ACL sub configuration mode.



R1(config)# ip access-list extended NO-FTP-ACCESS

R1(config-ext-nacl)#

8.3.9



Named Extended IPv4 ACL Example	Named extended ACLs are created in essentially the same way that named standard ACLs are created.



The topology in the figure is used to demonstrate configuring and applying two named extended IPv4 ACLs to an interface: On cards 68 and 69.



Inside Private Network 



LAN 1



192.168.10.0/24 Surfing

 Browsing



Outside Public Network



Internet



The example shows the configuration for the inbound SURFING ACL and the outbound BROWSING ACL.



The SURFING ACL permits HTTP and HTTPS traffic from inside users to exit the G0/0/1 interface connected to the internet. Web traffic returning from the internet is permitted back into the inside private network by the BROWSING ACL.



The SURFING ACL is applied inbound and the BROWSING ACL applied outbound on the R1 G0/0/0 interface, as shown in the output.



Inside hosts have been accessing the secure web resources from the internet. The show access-lists command is used to verify the ACL statistics. Notice that the permit secure HTTPS counters (i.e., eq 443) in the SURFING ACL and the return established counters in the BROWSING ACL have increased.



R1(config)# ip access-list extended SURFING

R1(config-ext-nacl)# Remark Permits inside HTTP and HTTPS traffic

R1(config-ext-nacl)# permit tcp 192.168.10.0 0.0.0.255 any eq 80

R1(config-ext-nacl)# permit tcp 192.168.10.0 0.0.0.255 any eq 443

R1(config-ext-nacl)# exit

R1(config)#

R1(config)# ip access-list extended BROWSING

R1(config-ext-nacl)# Remark Only permit returning HTTP and HTTPS traffic

R1(config-ext-nacl)# permit tcp any 192.168.10.0 0.0.0.255 established

R1(config-ext-nacl)# exit

R1(config)# interface g0/0/0

R1(config-if)# ip access-group SURFING in

R1(config-if)# ip access-group BROWSING out

R1(config-if)# end

R1# show access-lists

Extended IP access list SURFING

10 permit tcp 192.168.10.0 0.0.0.255 any eq www

20 permit tcp 192.168.10.0

Surfing	This will permit inside HTTP and HTTPS traffic to exit to the internet.

Browsing	This will only permit returning web traffic to the inside hosts while all other traffic exiting the R1 G0/0/0 interface is implicitly denied.

Modify ACLs



8.4.1



Two Methods to Modify an ACL	After an ACL is configured, it may need to be modified. ACLs with multiple ACEs can be complex to configure. Sometimes the configured ACE does not yield the expected behaviors. For these reasons, ACLs may initially require a bit of trial and error to achieve the desired filtering result.



This section will discuss two methods to use when modifying an ACL:



Use a Text Editor



Use Sequence Numbers

8.4.2



Text Editor Method	ACLs with multiple ACEs should be created in a text editor. This allows you to plan the required ACEs, create the ACL, and then paste it into the router interface. It also simplifies the tasks to edit and fix an ACL.



For example, assume ACL 1 was entered incorrectly using 19 instead of 192 for the first octet, as shown in the running configuration.



R1# show run | section access-list

access-list 1 deny 19.168.10.10

access-list 1 permit 192.168.10.0 0.0.0.255

R1#



In the example, the first ACE should have been to deny the host at 192.168.10.10. However, the ACE was incorrectly entered.



To correct the error:



Copy the ACL from the running configuration and paste it into the text editor.



Make the necessary changes.



Remove the previously configured ACL on the router. Otherwise, pasting the edited ACL commands will only append (i.e., add) to the existing ACL ACEs on the router.



Copy and paste the edited ACL back to the router.



Assume that ACL 1 has now been corrected. Therefore, the incorrect ACL must be deleted, and the corrected ACL 1 statements must be pasted in global configuration mode, as shown in the output.



R1(config)# no access-list 1

R1(config)#

R1(config)# access-list 1 deny 19.168.10.10

R1(config)# access-list 1 permit 192.168.10.0 0.0.0.255

R1(config)#

8.4.3



Sequence Number Method	An ACL ACE can also be deleted or added using the ACL sequence numbers. Sequence numbers are automatically assigned when an ACE is entered. These numbers are listed in the show access-lists command. The show running-config command does not display sequence numbers.



In the previous example, the incorrect ACE for ACL 1 is using sequence number 10, as shown in the example.



R1# show access-lists

Standard IP access list 1

10 deny 19.168.10.10

20 permit 192.168.10.0, wildcard bits 0.0.0.255

R1#



Use the ip access-list standard command to edit an ACL. Statements cannot be overwritten using the same sequence number as an existing statement. Therefore, the current statement must be deleted first with the no 10 command. Then the correct ACE can be added using sequence number 10 is configured. Verify the changes using the show access-lists command, as shown in the example.



R1# conf t

R1(config)# ip access-list standard 1

R1(config-std-nacl)# no 10

R1(config-std-nacl)# 10 deny host 192.168.10.10

R1(config-std-nacl)# end

R1# show access-lists

Standard IP access list 1

10 deny 192.168.10.10

20 permit 192.168.10.0, wildcard bits 0.0.0.255

R1#

8.4.4



Syntax Checker - Modify IPv4 ACLs	Modify an ACL using sequence numbers.



Internet



10.1.1.0/30



LAN 1



192.168.10.0/24



LAN 2



192.168.20.0/24



Use the show access-lists command to verify the configured ACLs.



R1#show access-lists

Standard IP access list 1

10 deny 19.168.10.10

20 permit 192.168.10.0, wildcard bits 0.0.0.255



You notice that ACE 10 is incorrect and needs to be edited. Enter global configuration mode and use the ip access-list standard command for ACL 1.



R1#configure terminal

R1(config)#ip access-list standard 1



An incorrect ACE must be deleted and then re-entered. Remove the ACE with sequence number 10.



R1(config-std-nacl)#no 10



Next, re-enter the correct ACE using sequence number 10 to deny the host with the IP address 192.168.10.10 access outside of LAN 1 and return to privileged EXEC mode using the end command.



R1(config-std-nacl)#10 deny host 192.168.10.10

R1(config-std-nacl)#end



Verify the new entry using the show access-lists command.



R1#show access-lists

Standard IP access list 1

10 deny 192.168.10.10

20 permit 192.168.10.0, wildcard bits 0.0.0.255



You have successfully modified an IPv4 numbered ACL on R1.

Implement ACLs



8.5.1



ACL Configuration Guidelines	An ACL is made up of one or more access control entries (ACEs) or statements. When configuring and applying an ACL, be aware of the guidelines summarized in this list:



Create an ACL globally and then apply it.



Ensure the last statement is an implicit deny any or deny ip any any.



Remember that statement order is important because ACLs are processed top-down.



As soon as a statement is matched the ACL is exited.



Always filter from the most specific to the most generic. For example, deny a specific host and then permit all other hosts.



Remember that only one ACL is allowed per interface, per protocol, per direction.



Remember that new statements for an existing ACL are added to the bottom of the ACL by default.



Remember that router-generated packets are not filtered by outbound ACLs.



Place standard ACLs as close to the destination as possible.



Place extended ACLs as close to the source as possible.

8.5.2



Apply an ACL	After creating an ACL, the administrator can apply it in a number of different ways. The following shows the command syntax to apply an ACL to an interface or to the vty lines.



Router(config-if)# ip access-group {acl-# | name} {in | out}



Router(config-line)# access-class {acl-# | name} {in | out}



The figure below shows a named standard ACL applied to outbound traffic.



Named Standard ACL Example



PC1PC2S2S1S0/0/0G0/1G0/0192.168.10.0/24192.168.11.0/24192.168.10.10/24192.168.11.10/24R1

Company A



R1(config)# ip access-list standard NO_ACCESS

R1(config-std-nacl)# deny host 192.168.11.10

R1(config-std-nacl)# permit any

R1(config-std-nacl)# exit

R1(config)# interface g0/0

R1(config-if)# ip access-group NO_ACCESS out



This figure shows two named extended ACLs. The SURFING ACL is applied to inbound traffic and the BROWSING ACL is applied to outbound traffic.



Named Extended ACL Example



R2R1R3S1S2ISPS0/0/0S0/1/0S0/0/1S0/0/1S0/0/0G0/0G0/1192.168.11.0/24192.168.10.0/2410.1.1.1/30



R1(config)# ip access-list extended SURFING

R1(config-ext-nacl)# permit tcp 192.168.10.0 0.0.0.255 any eq 80

R1(config-ext-nacl)# permit tcp 192.168.10.0 0.0.0.255 any eq 443

R1(config-ext-nacl)# exit

R1(config)# ip access-list extended BROWSING

R1(config-ext-nacl)# permit tcp any 192.168.10.0 0.0.0.255 established

R1(config-ext-nacl)# exit

R1(config)# interface g0/0

R1(config-if)# ip access-group SURFING in

R1(config-if)# ip access-group BROWSING out



Named ACL on VTY Lines with Logging



192.168.10.10



R1



Enabling the log parameter on a Cisco router or switch seriously affects the performance of that device. The log parameter should only be used when the network is under attack, and an administrator is trying to determine who the attacker is.



Applying ACLs to interfaces and lines is just one of their many possible uses. ACLs are also an integral

8.5.3



Where to Place ACLs	Every ACL should be placed where it is the most efficient.



The figure illustrates where standard and extended ACLs should be located in an enterprise network. Assume the objective is to prevent traffic that originates in the 192.168.10.0/24 network from reaching the 192.168.30.0/24 network.



R2S0/1/0S0/1/0G0/0/0192.168.11.0/24192.168.10.10192.168.11.10192.168.30.12192.168.31.12192.168.30.0/24192.168.31.0/24S0/1/1S0/1/1G0/0/1192.168.10.0/24G0/0/0G0/0/1R1S1S2S3S4R3PC1PC3PC2

Standard ACLs are usually placed near the destination.Extended ACLs are usually placed near the source.



Extended ACLs should be located as close as possible to the source of the traffic to be filtered. This way, undesirable traffic is denied close to the source network without crossing the network infrastructure.



Standard ACLs should be located as close to the destination as possible. If a standard ACL was placed at the source of the traffic, the "permit" or "deny" will occur based on the given source address no matter where the traffic is destined.



Placement of the ACL and therefore, the type of ACL used, may also depend on a variety of factors as listed in the table.



On cards 77-79.

The extent of organizational control	Placement of the ACL can depend on whether or not the organization has control of both the source and destination networks.

Bandwidth of the networks involved	It may be desirable to filter unwanted traffic at the source to prevent transmission of bandwidth-consuming traffic.

Ease of configuration	It may be easier to implement an ACL at the destination, but traffic will use bandwidth unnecessarily.



An extended ACL could be used on each router where the traffic originated. This would save bandwidth by filtering the traffic at the source, but it would require creating extended ACLs on multiple routers.

8.5.4



Standard ACL Placement Example	Following the guidelines for ACL placement, standard ACLs should be located as close to the destination as possible.



In the figure, the administrator wants to prevent traffic originating in the 192.168.10.0/24 network from reaching the 192.168.30.0/24 network.



The graphic illustrates how to place a standard A C L on a network. This network has three routers and four LANs. There is a router at the top center named R 2. Below and to the left is a router named R 1 connecting to R 2 with a serial cable. Both R 1 and R 2 are using their S0/1/0 interface. To the right of R 2 is a router named R 3 connecting to R 2 with a serial cable. Both R 3 and R 2 are using their S0/1/1 interface. R 1 and R 3 have two LANs each. R 1 has a LAN connected from G0/0/0 to switch S1 that has node P C1. This is the 192.168.10.0/24 network. R 1 has a second LAN connected from G0/1 to switch S2 that has node P C2. This is the 192.168.11.0/24 network. R 3 has a LAN connected from G0/0/0 to switch S3 that has node P C3. This is the 192.168.30.0/24 network. R 3 has a second LAN connected from G0/0/1 to switch S4 that has node P C4. This is the 192.168.31.0/24 network. In an orange box at the top are the words Block all traffic from 192.168.10.0/24 to 192.168.30.0/24. There is a funnel on the serial cable between R 2 and R 3 with the wide end of the funnel is on the R 2 side. Beside the funnel is the statement, Filters traffic from 192.168.10.0/24 to all destinations reachable by R 3. There is a second funnel on the Ethernet cable between R 3 and S3 with the wide end on the R 3 side. Beside the funnel is the statement, Filters traffic from 192.168.10.0/24 only to 192.168.30.0/24.

R2S0/1/0G0/0/0192.168.11.0/24192.168.30.0/24192.168.31.0/24S0/1/1G0/0/1192.168.10.0/24G0/0/0R1S1S2S3S4R3PC1PC3PC2S0/1/0S0/1/1PC4G0/0/1

Site ASite BBlock all traffic from 1

R3 S0/1/1 interface (inbound)	The standard ACL can be applied inbound on the R3 S0/1/1 interface to deny traffic from .10 network. However, it would also filter .10 traffic to the 192.168.31.0/24 (.31 in this example) network. Therefore, the standard ACL should not be applied to this interface.

R3 G0/0/0 interface (outbound)	The standard ACL can be applied outbound on the R3 G0/0/0 interface. This will not affect other networks that are reachable by R3. Packets from .10 network will still be able to reach the .31 network. This is the best interface to place the standard ACL to meet the traffic requirements.

8.5.5



Packet Tracer - Configure Named Standard IPv4 ACLs	The senior network administrator has asked you to create a named standard ACL to prevent access to a file server. All clients from one network and one specific workstation from a different network should be denied access.

8.5.6



Packet Tracer - Configure Numbered Standard IPv4 ACLs	Standard access control lists are router configuration scripts that control whether a router permits or denies packets based on the source address. This activity focuses on defining filtering criteria, configuring standard ACLs, applying ACLs to router interfaces, and verifying and testing the ACL implementation. The routers are already configured.

8.5.7



Extended ACL Placement Example	Extended ACLs should be located as close to the source as possible. This prevents unwanted traffic from being sent across multiple networks only to be denied when it reaches its destination.



However, the organization can only place ACLs on devices that they control. Therefore, the extended ACL placement must be determined in the context of where organizational control extends.



In the figure, for example, Company A wants to deny Telnet and FTP traffic to Company B's 192.168.30.0/24 network from their 192.168.11.0/24 network while permitting all other traffic.



R2R1S1S2S3S4R3PC1PC3PC2PC4S0/1/0G0/0/0192.168.11.0/24192.168.30.0/24192.168.31.0/24S0/1/1G0/0/1192.168.10.0/24G0/0/0G0/0/1S0/1/0S0/1/1

Examines all traffic before exiting R1 S0/1/0.Examines traffic only from 192.168.11.0/24.Company ACompany BBlock FTP and Telnet traffic from 192.168.11.0/24 to 192.168.30.0/24.



The solution is to place an extended ACL on R1 that specifies both source and destination addresses.



There are two possible interfaces on R1 to apply the extended ACL:



On cards 86-87.

R1 S0/1/0 interface (outbound)	The extended ACL can be applied outbound on the S0/1/0 interface. However, this solution will process all packets leaving R1 including packets from 192.168.10.0/24.

R1 G0/0/1 interface (inbound)	The extended ACL can be applied inbound on the G0/0/1 so that only packets from the 192.168.11.0/24 network are subject to ACL processing on R1. Because the filter is to be limited to only those packets leaving the 192.168.11.0/24 network, applying the extended ACL to G0/0/1 is the best solution.

8.5.8



Check Your Understanding - Guidelines for ACL Placement	Check your understanding of the types of IPv4 ACLs by choosing the BEST answer to the following questions.

1. Which ACL is capable of filtering based on TCP port number?	extended ACL

2. Which statement about ACLs is true?	Named ACLs can be standard or extended.

3. Where should a standard ACL be placed?	Standard ACLs should be placed as close to the destination as possible.

4. Where should an extended ACL be placed?	Extended ACLs should be located as close to the source as possible.

8.5.9



Check Your Understanding - Configure Standard ACLs	Use this network topology diagram to answer the three scenarios.



192.168.1.66192.168.1.0/24LAN1G0/0G0/1192.168.2.0/24LAN2172.16.1.0/30S0/0/0S0/0/0G0/1192.168.4.0/24LAN4G0/0192.168.3.0/24LAN3192.168.4.12192.168.3.77R2R1



Scenario 1





The figure shows the reference topology that will be used in the subsequent interactive activities.

192.168.1.66192.168.1.0/24LAN1G0/0G0/1192.168.2.0/24LAN2172.16.1.0/30S0/0/0S0/0/0G0/1192.168.4.0/24LAN4G0/0192.168.3.0/24LAN3192.168.4.12192.168.3.77R2R1



Scenario 2





The figure shows the reference topology that will be used in the subsequent interactive activities.

192.168.1.66192.168.1.0/24LAN1G0/0G0/1192.168.2.0/24LAN2172.16.1.0/30S0/0/0S0/0/0G0/1192.168.4.0/24LAN4G0/0192.168.3.0/24LAN3192.168.4.12192.168.3.77R2R1



Scenario 3

Refer to the network topology diagram as needed to complete this scenario. Select the commands in the drop-down lists that are provided. Configure the router to acheive the ACL goal by putting the commands in the correct order to control access to both the 192.168.3.0 and 192.168.4.0 LANs. All hosts in the 192.168.1.0 LAN should be permitted access to these two networks. The 192.168.2.0 network should not have access to these networks.	R2 Configuration Commands





access-list 88 permit 192.168.1.0 0.0.0.255



interface s0/0/0



ip access-group 88 in

8.5.10



Check Your Understanding - Create an Extended ACL Statement	On cards 96-98.

Scenario 1	Create a numbered ACL statement that will only allow users on the 10.1.1.0/24 network to have HTTP access to the web server on the 10.1.3.0/24 network. The ACL is applied to R2 S0/0/0 outbound.



Create an extended ACL based on the requirements and the topology shown. Select the ACL statement components from the drop-down lists so that, when read from left to right, you have created a valid ACL for the scenario. Some components will not be used.



access-list



101



permit 



tcp



10.1.1.0



0.0.0.255



host



10.1.3.8



eq 80

Scenario 2	Create a numbered ACL statement that will block host 10.1.2.9 from having FTP access to the 10.1.1.0/24 network. The ACL is applied to R2 G0/1 inbound.



Create an extended ACL based on the requirements and the topology shown. Select the ACL statement components from the drop-down lists so that, when read from left to right, you have created a valid ACL for the scenario. Some components will not be used.



access-list



122



deny



tcp



host



10.1.2.9



10.1.1.0



0.0.0.255



eq 21

Scenario 3	Create a numbered ACL statement that will allow only host 10.1.3.8 on the 10.1.3.0/24 network to reach destinations beyond that network. The ACL is applied to R1 G0/0 inbound.



Create an extended ACL based on the requirements and the topology shown. Select the ACL statement components from the drop-down lists so that, when read from left to right, you have created a valid ACL for the scenario. Some components will not be used.



access-list



150



permit



ip 



host



10.1.3.8



any

8.5.11



Check Your Understanding - Evaluate Extended ACLs	Click button Scenario 1, Scenario 2, Scenario 3 to complete the activity. On cards 99-101.



Refer the below Image to review the topology at any time.



192.168.1.66192.168.1.0/24LAN1G0/0S0/0/0G0/1192.168.2.0/24LAN2172.16.1.0/30192.168.4.12192.168.4.0/24LAN4G0/1S0/0/0G0/0192.168.3.200192.168.3.0/24LAN3R1R2

Extended ACLs applied to G0/0 inbound.



Scenario 1



Refer to the topology in the above figure. This scenario provides the extended ACL 103 and the source and destination combinations in the table. Based on this information, determine whether packets will be permitted or denied. Select Permit or Deny in the dropdown next to each source and destination combination. Click Scenario 2 to continue.



access-list 103 permit ip host 192.168.1.66 host 192.168.3.75

access-list 103 permit ip host 192.168.1.77 host 192.168.3.75

access-list 103 deny ip 192.168.1.0 0.0.0.255 host 192.168.3.75

access-list 103 deny ip 192.168.1.0 0.0.0.255 192.168.4.0 0.0.0.255

access-list 103 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255





Source Destination Permit or Deny



192.168.1.66 192.168.3.51 Deny



192.168.1.66 192.168.3.75 Permit



192.168.1.88 192.168.3.51 Deny



192.168.1.88 192.168.3.75 Deny



192.168.1.77 192.168.3.75 Permit



192.168.1.33 192.168.2.34 Permit

Scenario 2	Refer to the topology in the above figure. This scenario provides the extended ACL 104 and the source and destination combinations in the table. Based on this information, determine whether packets will be permitted or denied. Drag Permit or Deny to the field next to each source and destination combination. Click Scenario 3 to continue.



access-list 104 deny tcp host 192.168.1.66 host 192.168.3.200 eq 80

access-list 104 permit tcp host 192.168.1.77 host 192.168.3.75 eq 22

access-list 104 deny ip 192.168.1.0 0.0.0.255 192.168.3.0 0.0.0.255

access-list 104 permit ip 192.168.1.0 0.0.0.255 192.168.4.0 0.0.0.255





Source Destination Protocol Permit or Deny



192.168.1.66 172.16.1.88 http Deny



192.168.1.66 192.168.4.75 ssh Permit



192.168.1.77 192.168.3.75 http Deny



192.168.1.88 192.168.2.75 http Deny 



192.168.1.77 192.168.3.75 ssh Permit



192.168.1.66 192.168.3.200 http Permit

Scenario 3	Refer to the topology in the above figure. This scenario provides the extended ACL 105 and the source and destination combinations in the table. Based on this information, determine whether packets will be permitted or denied. Drag Permit or Deny to the field next to each source and destination combination.



access-list 105 permit tcp 192.168.1.0 0.0.0.255 host 192.168.3.200 eq 80

access-list 105 permit ip host 192.168.1.66 host 192.168.3.200

access-list 105 permit tcp 192.168.1.0 0.0.0.255 host 192.168.4.12 eq 22

access-list 105 permit tcp host 192.168.1.66 192.168.2.0 0.0.0.255 eq 23





Source Destination Protocol Permit or Deny



192.168.1.67 192.168.2.88 http Deny



192.168.1.66 192.168.4.12 ssh Permit



192.168.1.77 192.168.3.75 http Deny



192.168.1.66 192.168.2.75 Telnet Deny



192.168.1.77 192.168.2.75 Telnet Permit



192.168.1.66 192.168.3.200 Telnet Permit

8.5.12



Packet Tracer - Configure Extended ACLs Scenario 1	In this Packet Tracer activity, you will complete the following objectives:



Part 1: Configure, Apply, and Verify an Extended Numbered IPv4 ACL

Part 2: Configure, Apply, and Verify an Extended Named IPv4 ACL



Configure Extended ACLs Scenario 1

Configure Extended ACLs Scenario 1

8.5.13



Packet Tracer - Configure Extended ACLs Scenario 2	In this Packet Tracer activity, you will complete the following objectives:



Part 1: Configure a Named Extended IPv4 ACL

Part 2: Apply and Verify the Extended IPv4 ACL



Configure Extended ACLs Scenario 2

Configure Extended ACLs Scenario 2

Mitigate Attacks with ACLs



8.6.1



Mitigate Spoofing Attacks	ACLs can be used to mitigate many network threats, such as IP address spoofing and denial of service (DoS) attacks. Most DoS attacks use some type of spoofing. IP address spoofing overrides the normal packet creation process by inserting a custom IP header with a different source IP address. Attackers can hide their identity by spoofing the source IP address.



There are many well-known classes of IP addresses that should never be seen as source IP addresses for traffic entering an organization's network. For example, in the figure the S0/0/0 interface is attached to the internet and should never accept inbound packets from the following addresses:



All zeros addresses

Broadcast addresses

Local host addresses (127.0.0.0/8)

Automatic Private IP Addressing (APIPA) addresses (169.254.0.0/16)

Reserved private addresses (RFC 1918)

IP multicast address range (224.0.0.0/4)



The 192.168.1.0/24 network is attached to the R1 G0/0 interface. This interface should only allow inbound packets with a source address from that network. The ACL for G0/0 shown in the figure will only permit inbound packets from the 192.168.1.0/24 network. All others will be discarded.



R1192.168.1.0/24G0/0S0/0/0

Internet



Inbound on S0/0/0:



R1(config)# access-list 150 deny ip host 0.0.0.0 any

R1(config)# access-list 150 deny ip 10.0.0.0 0.255.255.255 any

R1(config)# access-list 150 deny ip 127.0.0.0 0.255.255.255 any

R1(config)# access-list 150 deny ip 172.16.0.0 0.15.255.255 any

R1(config)# access-list 150 deny ip 192.168.0.0 0.0.255.255 any

R1(config)# access-list 150 deny ip 224.0.0.0 15.255.255.255 any

R1(config)# access-list 150 deny ip host 255.255.255.255 any



Inbound on G0/0:



R1(config)# access-list 105 permit ip 192.168.1.0 0.0.0.255 any

8.6.2



Permit Necessary Traffic through a Firewall	An effective strategy for mitigating attacks is to explicitly permit only certain types of traffic through a firewall. For example, Domain Name System (DNS), Simple Mail Transfer Protocol (SMTP), and File Transfer Protocol (FTP) are services that often must be allowed through a firewall. It is also common to configure a firewall so that it permits administrators remote access through the firewall. Secure Shell (SSH), syslog, and Simple Network Management Protocol (SNMP) are examples of services that a router may need to include. While many of these services are useful, they should be controlled and monitored. Exploitation of these services leads to security vulnerabilities.



The figure shows an example topology with ACL configurations to permit specific services on the Serial 0/0/0 interface.



R1PC1200.5.5.5/24Serial 0/0/010.0.1.1G0/1G0/0

Internet192.168.20.2/24DNS, SMTP, FTP



Inbound on Serial 0/0/0



R1(config)# access-list 180 permit udp any host 192.168.20.2 eq domain

R1(config)# access-list 180 permit tcp any host 192.168.20.2 eq smtp

R1(config)# access-list 180 permit tcp any host 192.168.20.2 eq ftp

R1(config)# access-list 180 permit tcp host 200.5.5.5 host 10.0.1.1 eq 22

R1(config)# access-list 180 permit udp host 200.5.5.5 host 10.0.1.1 eq syslog

R1(config)# access-list 180 permit udp host 200.5.5.5 host 10.0.1.1 eq snmptrap

8.6.3



Mitigate ICMP Attacks	Hackers can use Internet Control Message Protocol (ICMP) echo packets (pings) to discover subnets and hosts on a protected network and to generate DoS flood attacks. Hackers can use ICMP redirect messages to alter host routing tables. Both ICMP echo and redirect messages should be blocked inbound by the router.



Several ICMP messages are recommended for proper network operation and should be allowed into the internal network: On cards 107-109.

Echo reply	Allows users to ping external hosts.

Source quench	Requests that the sender decrease the traffic rate of messages.

Unreachable	Generated for packets that are administratively denied by an ACL.

Several ICMP messages are required for proper network operation and should be allowed to exit the network: On cards 111-114.	

Echo	Allows users to ping external hosts.

Parameter problem	Informs the host of packet header problems.

Packet too big	Enables packet maximum transmission unit (MTU) discovery.

Source quench	Throttles down traffic when necessary.

As a rule, block all other ICMP message types outbound.	ACLs are used to block IP address spoofing, selectively permit specific services through a firewall, and to allow only required ICMP messages. The figure shows a sample topology and possible ACL configurations to permit specific ICMP services on the G0/0 and S0/0/0 interfaces.



R1209.165.201.3/24S0/0/0G0/0192.168.1.0/24

Internet



Inbound on S0/0/0:



R1(config)# access-list 112 permit icmp any any echo-reply

R1(config)# access-list 112 permit icmp any any source-quench

R1(config)# access-list 112 permit icmp any any unreachable

R1(config)# access-list 112 deny icmp any any

R1(config)# access-list 112 permit ip any any





Inbound on G0/0:



R1(config)# access-list 114 permit icmp 192.168.1.0 0.0.0.255 any echo

R1(config)# access-list 114 permit icmp 192.168.1.0 0.0.0.255 any parameter-problem

R1(config)# access-list 114 permit icmp 192.168.1.0 0.0.0.255 any packet-too-big

R1(config)# access-list 114 permit icmp 192.168.1.0 0.0.0.255 any source-quench

R1(config)# access-list 114 deny icmp any any

R1(config)# permit ip any any

8.6.4



Mitigate SNMP Attacks	Management protocols, such as SNMP, are useful for remote monitoring and management of networked devices. However, they can still be exploited. If SNMP is necessary, exploitation of SNMP vulnerabilities can be mitigated by applying interface ACLs to filter SNMP packets from non-authorized systems. An exploit may still be possible if the SNMP packet is sourced from an address that has been spoofed and is permitted by the ACL.



These security measures are helpful, but the most effective means of exploitation prevention is to disable the SNMP server on IOS devices for which it is not required. As shown in the figure, use the command no snmp-server to disable SNMP services on Cisco IOS devices.



The figure shows a computer with a hacker connected to the internet. The internet is connected to a router. the computer screen reads attempted s n m p exploit. There is a bubble above the router that reads s n m p disabled. s n m p request denied.

Attempted SNMP exploitSNMP disabled,SNMP request denied.Internet



Router(config)# no snmp-server

8.6.5



Packet Tracer - Configure IP ACLs to Mitigate Attacks	In this Packet Tracer, you will complete the following objectives:



Verify connectivity among devices before firewall configuration.

Use ACLs to ensure remote access to the routers is available from only management station PC-C.

Configure ACLs on R1 and R3 to mitigate attacks.

Verify ACL functionality.



Configure IP ACLs to Mitigate Attacks

Configure IP ACLs to Mitigate Attacks

IPv6 ACLs



8.7.1



IPv6 ACL Overview	In recent years, many networks have begun the transition to an IPv6 environment. Part of the need for the transition to IPv6 is because of the inherent weaknesses in IPv4.



Unfortunately, as the migration to IPv6 continues, IPv6 attacks are becoming more pervasive. IPv4 will not disappear overnight. IPv4 will coexist with IPv6 and then gradually be replaced by IPv6. This creates potential security holes. An example of a security concern is threat actors leveraging IPv4 to exploit IPv6 in dual stack environments. Dual stack is an integration method in which a device has connectivity to both IPv4 and IPv6 networks. In a dual stack environment devices operate with two IP protocol stacks.



Threat actor can accomplish stealth attacks that result in trust exploitation by using dual-stacked hosts, rogue Neighbor Discovery Protocol (NDP) messages, and tunneling techniques. Teredo tunneling, for example, is an IPv6 transition technology that provides automatic IPv6 address assignment when IPv4/IPv6 hosts are located behind IPv4 network address translation (NAT) devices. It accomplishes this by embedding the IPv6 packets inside IPv4 UDP packets. The threat actor gains a foothold in the IPv4 network. The compromised host sends rogue router advertisements (RAs), which triggers dual stacked hosts to obtain an IPv6 address. The threat actor can then use this foothold to move around, or pivot, inside the network. The threat actor can compromise additional hosts before sending traffic back out of the network, as shown in the figure.



Sample IPv6 Exploit



Threat actor traffic gains foothold via IPv4, sends rogue IPv6 RAs, and pivots using IPv6 hosts.



Unknown IPv6 hosts autoconfigure their stacks silently by initiating automatic Teredo tunnels using UDP.



IPv4 firewall sees and allows IPv4 UDP traffic.



It is necessary to develop and i

8.7.2



IPv6 ACL Syntax	The ACL functionality in IPv6 is similar to ACLs in IPv4. However, there is no equivalent to IPv4 standard ACLs. In addition, all IPv6 ACLs must be configured with a name. IPv6 ACLs allow filtering based on source and destination addresses that are traveling inbound and outbound to a specific interface. They also support traffic filtering based on IPv6 option headers and optional, upper-layer protocol type information for finer granularity of control, similar to extended ACLs in IPv4. To configure an IPv6 ACL, use the ipv6 access-list command to enter into IPv6 ACL configuration mode. Next, use the syntax shown in the figure to configure each access list entry to specifically permit or deny traffic. The syntax shown is a simplified version of the IPv6 ACE syntax. There are additional options. It should be clear from the provided syntax that IPv6 ACLs are considerably more flexible than IPv4 ACLs.



Apply an IPv6 ACL to an interface with the ipv6 traffic-filter command.



Router(config)# ipv6 access-list access-list-name

Router(config-ipv6-acl)# deny | permit protocol {source-ipv6-prefix / prefix-length | any | host source-ipv6-address} [ operator [ port-number ]] { destination-ipv6-prefix / prefix-length | any | host

destination-ipv6-address } [ operator [ port-number ]] [ dscp value ] [ fragments ] [ log ] [ log-input] [ sequence value ] [ time-range name ]

Parameters on cards 121-133.	

deny | permit	Specifies whether to deny or permit the packet.

protocol	Enter the name or number of an Internet protocol, or an integer representing an IPv6 protocol number.

source-ipv6-prefix / prefix-length destination-ipv6-address / prefix-length	The source or destination IPv6 network or class of networks for which to set deny or permit conditions.

any	Enter any as an abbreviation for the IPv6 prefix ::/0. This matches all addresses.

host	For host source-ipv6-address or destination-ipv6-address , enter the source or destination IPv6 host address for which to set deny or permit conditions.

operator	(Optional) An operand that compares the source or destination ports of the specified protocol. Operands are lt (less than), gt (greater than), eq (equal), neq (not equal), and range.

port-number	(Optional) A decimal number or the name of a TCP or UDP port for filtering TCP or UDP, respectively.

dscp	(Optional) Matches a differentiated services codepoint value against the traffic class value in the Traffic Class field of each IPv6 packet header. The acceptable range is from 0 to 63.

fragments	(Optional) Matches non-initial fragmented packets where the fragment extension header contains a non-zero fragment offset. The fragments keyword is an option only if the operator [port-number ] arguments are not specified. When this keyword is used, it also matches when the first fragment does not have Layer 4 information.

log	(Optional) Causes an informational logging message about the packet that matches the entry to be sent to the console. (The level of messages logged to the console is controlled by the logging console command.)

log input	(Optional) Provides the same function as the log keyword, except that the logging message also includes the input interface.

sequence value	(Optional) Specifies the sequence number value for the access list statement. The acceptable range is from 1 to 4294967295.

time-range name	(Optional) Specifies the time range that applies to the permit statement. The name of the time range and its restrictions are specified by the time-range and absolute or periodic commands, respectively.

8.7.3



Configure IPv6 ACLs	An IPv6 ACL contains an implicit deny ipv6 any any. Each IPv6 ACL also contains implicit permit rules to enable IPv6 neighbor discovery. The IPv6 Neighbor Discovery Protocol (NDP) requires the use of the IPv6 network layer to send neighbor advertisements (NAs) and neighbor solicitations (NSs). If an administrator configures the deny ipv6 any any command without explicitly permitting neighbor discovery, then the NDP will be disabled.



In the figure, R1 is permitting inbound traffic on G0/0 from the 2001:DB8:1:1::/64 network. NA and NS packets are explicitly permitted. Traffic sourced from any other IPv6 address is explicitly denied. If the administrator only configured the first permit statement, the ACL would have the same effect. However, it is a good practice to document the implicit statements by explicitly configuring them.



The figure shows a computer connected to R 1 via G0/0 with the network address 2001:DB8:1:1:: / 64

R1

Internet2001:DB8:1:1::/64G0/0



R1(config)# ipv6 access-list LAN_ONLY

R1(config-ipv6-acl)# permit 2001:db8:1:1::/64 any

R1(config-ipv6-acl)# permit icmp any any nd-na

R1(config-ipv6-acl)# permit icmp any any nd-ns

R1(config-ipv6-acl)# deny ipv6 any any

R1(config-ipv6-acl)# end

R1# show ipv6 access-list

IPv6 access list LAN_ONLY

permit ipv6 2001:DB8:1:1::/64 any sequence 10

permit icmp any any nd-na sequence 20

permit icmp any any nd-ns sequence 30

deny ipv6 any any sequence 40

R1#

8.7.4



Packet Tracer - Configure IPv6 ACLs	In this Packet Tracer, you will complete the following objectives:



Configure, apply, and verify an IPv6 ACL



Configure, apply, and verify a second IPv6 ACL



Configure IPv6 ACLs

Configure IPv6 ACLs.

Access Control Lists Summary



8.8.1



What Did I Learn in this Module?	Introduction to Access Control Lists



An ACL is a series of IOS commands that are used to filter packets based on information found in the packet header. By default, a router does not have any ACLs configured. An ACL uses a sequential list of permit or deny statements, known as ACEs. The packet filtering process occurs when network traffic passes through an interface configured with an ACL, and the router compares the information within the packet against each ACE, in sequential order, to determine if the packet matches one of the ACEs. Packet filtering can occur at Layer 3 or Layer 4. Cisco routers support Standard ACLs and Extended ACLs. ACLs number 1 to 99, or 1300 to 1999 are standard ACLs while ACLs number 100 to 199, or 2000 to 2699 are extended ACLs. Named ACLs are the preferred method to use when configuring ACLs. The name provides information about the purpose of the ACL. ACLs define the set of rules that give added control for packets that enter inbound interfaces, packets that relay through the router, and packets that exit outbound interfaces of the router.



Wildcard masking



An IPv4 ACE uses a 32-bit wildcard mask to determine which bits of the address to examine for a match. Wildcard masks are also used by the OSPF routing protocol. A wildcard mask is similar to a subnet mask in that it uses the ANDing process to identify which bits in an IPv4 address to match. However, they differ in the way they match binary 1s and 0s. Unlike a subnet mask, in which binary 1 is equal to a match and binary 0 is not a match, in a wildcard mask, the reverse is true. One shortcut method to calculate wildcard masks is to subtract the subnet mask from 255.255.255.255. The Cisco IOS provides two keywords, host and any, to simplify the most common uses of wildcard masking. Keywords reduce ACL keystrokes and make it easier to re

8.8.2



Module - Access Control Lists Quiz	

1. In applying an ACL to a router interface, which traffic is designated as outbound?	traffic that is leaving the router and going toward the destination host.

2. What is the quickest way to remove a single ACE from a named ACL?	Use the no keyword and the sequence number of the ACE to be removed.

3. Which ICMP message type should be stopped inbound?	echo

4. Which scenario would cause an ACL misconfiguration and deny all traffic?	Apply an ACL that has all deny ACE statements.

5. Refer to the exhibit. A network administrator is configuring an IPv6 ACL to allow hosts on the 2001:DB8:CAFE:10::/64 network to access remote web servers, except for PC1. However, a user on PC1 can successfully access the web server PC2. Why is this possible?	The IPv6 ACL Deny__WEB is permitting all web traffic before the specific host is blocked.

6. Refer to the exhibit. A network administrator wants to create a standard ACL to prevent Network 1 traffic from being transmitted to the Research and Development network. On which router interface and in which direction should the standard ACL be applied?	R2 Gi0/0 outbound

7. Which two statements describe appropriate general guidelines for configuring and applying ACLs? (Choose two.)	If an ACL contains no permit statements, all traffic is denied by default.



The most specific ACL statements should be entered first because of the top-down sequential nature of ACLs.

8. Refer to the exhibit. Which statement describes the function of the ACEs?	These ACEs allow for IPv6 neighbor discovery traffic.

9. What wild card mask will match networks 172.16.0.0 through 172.19.0.0?	0.3.255.255

10. What method is used to apply an IPv6 ACL to a router interface?	the use of the IPv6 traffic-filter command

11. What type of ACL offers greater flexibility and control over network access?	extended

12. Which operator is used in an ACL statement to match packets of a specific application?	eq

13. Which two keywords can be used in an access control list to replace a wildcard mask or address and wildcard mask pair? (Choose two.)	any



host

14. Consider the following access list.



access-list 100 permit ip host 192.168.10.1 anyaccess-list 100 deny icmp 192.168.10.0 0.0.0.255 any echoaccess-list 100 permit ip any any



Which two actions are taken if the access list is placed inbound on a router Gigabit Ethernet port that has the IP address 192.168.10.254 assigned? (Choose two.)	Devices on the 192.168.10.0/24 network are allowed to reply to any ping requests.



A Telnet or SSH session is allowed from any device on the 192.168.10.0 into the router with this access list assigned.
